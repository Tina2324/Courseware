HEAD：
	就是存盘点，实现版本控制
	git将每一次的提交串成一条时间线，这条时间线就是一条分支，默认只有一条分支，master，也叫作主分支。
	而HEAD指向的就是当前分支。

分支：
	1. 创建分支
		git branch 新分支名称
		将当前所在的分支复制一条新的分支出来
	2. 查看当前所有分支
		git branch
		其中前面有*的表示当前所在分支
	3. 切换分支
		git checkout 分支名
		切换到指定名称的分支上
		*其他分支上的修改，不会影响别的分支上的内容

		练习：
			先提交master分支的内容
			在master分支上，复制2条新的分支出来
			v1.1 , v1.2
			切换到v1.1，查看v1.1的内容
			切换到v1.2，查看v1.2的内容
			删除v1.2中文件的所有数据，提交保存
			再切换回v1.1，查看v1.1中的数据是否还在
			切换回master，检测master中的数据是否存在

	4. 删除分支
		git branch -d 分支名
		只能删除已经合并过的分支，如果分支中有新的提交没有合并，则删除失败；不能删除当前所在分支。
		如果要强制删除未合并分支，使用下面的命令：
		git branch -D 分支名

	5. 分支的合并
		git merge 分支名
		将指定名称的分支内容的修改，合并到当前分支
		在master分支，使用git merge v1，则是将v1的内容合并到master上去，
		v1的内容不会变化，master的内容发生改变


	练习：
		1、新建文件夹lianxi，并初始化为仓库
		2、新建文件1.txt，并输入内容“新建文件”，提交
		3、复制分支v1，查看当前有哪些分支
		4、切换到v1分支，将1.txt内容修改为"v1分支的修改"，提交
		5、切换到master分支，查看master分支的内容是否变化
		6、将v1的修改合并到master分支，查看提交日志及内容
		7、删除v1
		8、复制v2分支
		9、修改master分支中1.txt内容，提交
		10、切换到v2分支，查看v2内容是否与master一致
		11、将master内容合并到v2中，再次查看v2余master内容是否一致


git status
git add -A 忽略空文件夹的

仓库中，如果新建空文件夹/删除空文件夹，仓库的状态不会发生变化

新建的文件，如果没有被纳入到git的控制中，切换分支，对其不会有任何影响。

合并分支时，必须保证分支已经处于nothing to commit的状态
合并时，主动合并的分支的最新提交点，如果能在被合并的分支中找到，则可以正常自动合并完成。
如果找不到，则自动合并失败，需要手动处理。




GitHub社区
	1. 注册账号
	2. 创建远程仓库
		点击右上角 + ，选择 new repository
		在repository name中填入远程仓库的名称
		点击create
	3. 将本地仓库的内容推送给远程仓库
		分两步：
			·先将本地仓库与远程仓库关联
			git remote add origin 远程仓库地址
			关联远程仓库只需要第一次执行，以后就不需要了

			origin表示远程仓库地址的别名，方便以后使用

			·将本地仓库内容推送给远程仓库
			git push -u origin master

			-u表示第一次推送给远程仓库，第二次以后就不需要添加
			origin：关联远程仓库时起的别名，指代远程仓库地址

	关联远程仓库的两种方式：
	HTTPS：可以直接关联使用，但是每次push的时候都需要输入用户名与密码
	SSH：配置ssh密钥后，可以直接使用，不需要输入用户名密码
	配置密钥：
		生成密钥： ssh-keygen -t rsa -C "邮箱地址"
		生成一对密钥：
			id_rsa 私钥 (存放在自己电脑上)
			id_rsa.pub 公钥 (将其内容配置在GitHub中)
		在GitHub中配置公钥：
			打开id_rsa.pub文件，复制其中的内容
			在GitHub中点击右上角头像，选择settings
			-->SSH And GPGkeys
			-->add new SSH key
			-->title填入名称，key中粘贴前面复制的内容
			-->add
		注：本机电脑中生成的密钥不要删除


	4. 从远程仓库下载代码到本机
		1. 进入本地仓库，将本地仓库与远程仓库关联
			使用下面的命令下载远程仓库的内容：
			git pull 远程仓库地址/别名 master
			该命令会将远程仓库所有内容下载下来，包括所有的提交信息

		2. git clone命令
			git clone 远程仓库地址 
			不需要进入仓库，该命令会直接将目标远程仓库作为一个文件夹完整的下载下来。
			下载的文件夹本身就是一个包含了所有提交信息的仓库。

	5. 查看当前仓库有哪些远程关联
		git remote

	6. 删除远程关联
		git remote remove origin



练习：
	本地新建空文件夹，初始化本地仓库
	新建文件1.txt，2.txt，提交
	GitHub创建远程仓库，与本地仓库关联
	推送
		 新建远程仓库HTTPS，使用HTTPS方式关联推送
		 新建远程仓库ssh，使用ssh方式关联推送(配置密钥)








